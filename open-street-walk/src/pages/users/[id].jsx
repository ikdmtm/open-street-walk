import Head from "next/head";
import styles from "src/styles/Home.module.css";
import Link from "next/link";
import Cookies from "js-cookie";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { FlashMessage } from "src/components/FlashMessage/FlashMessage.jsx";

const MyPage = (props) => {
  console.log(props);
  const [ensureCorrectUser, setEnsureCorrectUser] = useState(false);
  const router = useRouter();
  const { id } = router.query;
  useEffect(() => {
    setEnsureCorrectUser(id == Cookies.get("user-id"));
  }, []);

  //ピンの削除処理
  const deletePin = async (pin) => {
    const url = process.env.NEXT_PUBLIC_API_URL + `/pins/${pin.id}`;
    const options = {
      method: "DELETE",
      headers: {
        "uid": Cookies.get("uid"),
        "client": Cookies.get("client"),
        "access-token": Cookies.get("access-token"),
      },
    };
    try {
      const res = await fetch(url, options);
      if (!res.ok) {
        throw new Error("ピンの削除に失敗");
      }
      console.log("Success: ピンの削除に成功");
      props.setNotice("ピンの削除に成功しました");
      router.push(`/users/${id}`);
    } catch (error) {
      console.error(error);
      props.setAlert("ピンの削除に失敗しました");
    }
  };

  return (
    <>
      <Head>
        <title>OpenStreetWalk</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.container}>
        <header className={styles.header}>
          <Link href={"/"} className={`${styles.logo} ${styles.button}`}>
            OpenStreetWalk
          </Link>
          {props.isLogin ? (
            <div>
              <Link href={"/pins/new"} className={styles.button}>
                ピン作成
              </Link>
              {"  "}
              <span
                className={`${styles.signout} ${styles.button}`}
                onClick={() => {
                  props.authSignout(props.setNotice, props.setAlert);
                }}
              >
                ログアウト
              </span>
            </div>
          ) : (
            <div>
              <Link href={"/signin"}>ログイン</Link>
              {"　"}
              <Link href={"/signup"}>新規登録</Link>
            </div>
          )}
        </header>
        <FlashMessage
          notice={props.notice}
          setNotice={props.setNotice}
          alert={props.alert}
          setAlert={props.setAlert}
        />
        <main className={styles.main}>
          <p>作成したピン一覧</p>
          <table className={styles.table}>
            <tbody>
              <tr>
                <th>タイトル</th>
                <th>緯度</th>
                <th>経度</th>
                <th>created_at</th>
              </tr>
              {props.pinsData &&
              props.pinsData.pins &&
              props.pinsData.pins.length
                ? props.pinsData.pins.map((pin) => {
                    return (
                      <tr key={pin.id}>
                        <td className={styles.pinDelete}>{pin.title}</td>
                        <td>{pin.lat}</td>
                        <td>{pin.lng}</td>
                        <td>{props.formatFunction(pin.created_at)}</td>
                        {ensureCorrectUser ? (
                          <td
                            className={`${styles.pinDeleteButton} ${styles.button}`}
                            onClick={() => {
                              deletePin(pin);
                            }}
                          >
                            削除
                          </td>
                        ) : null}
                      </tr>
                    );
                  })
                : null}
            </tbody>
          </table>
        </main>
      </div>
    </>
  );
};
export default MyPage;

// ログイン中のユーザーが作成したピンだけ取得するように変更
export const getServerSideProps = async (context) => {
  const { id } = context.query;
  const url = process.env.NEXT_PUBLIC_API_URL + `/users/${id}`;
  try {
    const res = await fetch(url);
    if (!res.ok) {
      throw new Error("ピンのデータ取得に失敗");
    }
    console.log("Success: ピンのデータを取得");
    const pins = await res.json();
    const pinsData = pins || null;
    return {
      props: {
        pinsData,
      },
    };
  } catch (error) {
    console.error(error);
    return {
      props: {
        pinsData: null,
      },
    };
  }
};
